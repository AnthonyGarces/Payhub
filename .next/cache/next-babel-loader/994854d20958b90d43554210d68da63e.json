{"ast":null,"code":"var moment = require('moment');\n\nmodule.exports = function (sequelize, DataTypes) {\n  const User = sequelize.define(\"user\", {\n    // The email cannot be null, and must be a proper email before creation\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    //auth level will have a drop down with the options Employee, Manager, Admin\n    authLevel: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    //username and password are used for auth/login purposes\n    username: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    manager: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    employmentDate: {\n      type: DataTypes.DATEONLY,\n      allowNull: true,\n      defaultValue: moment().format('l')\n    }\n  });\n\n  user.associate = function (models) {\n    user.hasMany(models.timeCard, {\n      foreignKey: {\n        allowNull: true\n      }\n    });\n    user.hasMany(models.ptoRequest, {\n      foreignKey: {\n        allowNull: true\n      }\n    });\n    user.hasMany(models.expense, {\n      foreignKey: {\n        allowNull: true\n      }\n    });\n    user.hasMany(models.citation, {\n      foreignKey: {\n        allowNull: true\n      }\n    });\n  };\n\n  User.prototype.validPassword = function (password) {\n    if (password === this.password) {\n      return true;\n    }\n  };\n\n  return User;\n};","map":{"version":3,"sources":["C:/Users/antho/ClassStuff/HW/Projects/project3/payhub/models/user.js"],"names":["moment","require","module","exports","sequelize","DataTypes","User","define","firstName","type","STRING","allowNull","lastName","authLevel","username","unique","password","manager","employmentDate","DATEONLY","defaultValue","format","user","associate","models","hasMany","timeCard","foreignKey","ptoRequest","expense","citation","prototype","validPassword"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,SAAT,EAAoBC,SAApB,EAA+B;AAE5C,QAAMC,IAAI,GAAGF,SAAS,CAACG,MAAV,CAAiB,MAAjB,EAAyB;AACpC;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADP;AAETC,MAAAA,SAAS,EAAE;AAFF,KAFyB;AAMpCC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERC,MAAAA,SAAS,EAAE;AAFH,KAN0B;AAUpC;AACAE,IAAAA,SAAS,EAAE;AACTJ,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADP;AAETC,MAAAA,SAAS,EAAE;AAFF,KAXyB;AAepC;AACAG,IAAAA,QAAQ,EAAE;AACRL,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERC,MAAAA,SAAS,EAAE,KAFH;AAGRI,MAAAA,MAAM,EAAE;AAHA,KAhB0B;AAqBpCC,IAAAA,QAAQ,EAAE;AACRP,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERC,MAAAA,SAAS,EAAE;AAFH,KArB0B;AAyBpCM,IAAAA,OAAO,EAAE;AACPR,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADT;AAEPC,MAAAA,SAAS,EAAE;AAFJ,KAzB2B;AA6BpCO,IAAAA,cAAc,EAAE;AACdT,MAAAA,IAAI,EAAEJ,SAAS,CAACc,QADF;AAEdR,MAAAA,SAAS,EAAE,IAFG;AAGdS,MAAAA,YAAY,EAAEpB,MAAM,GAAGqB,MAAT,CAAgB,GAAhB;AAHA;AA7BoB,GAAzB,CAAb;;AAoCAC,EAAAA,IAAI,CAACC,SAAL,GAAiB,UAASC,MAAT,EAAiB;AAEhCF,IAAAA,IAAI,CAACG,OAAL,CAAaD,MAAM,CAACE,QAApB,EAA8B;AAC5BC,MAAAA,UAAU,EAAE;AACVhB,QAAAA,SAAS,EAAE;AADD;AADgB,KAA9B;AAMAW,IAAAA,IAAI,CAACG,OAAL,CAAaD,MAAM,CAACI,UAApB,EAAgC;AAC9BD,MAAAA,UAAU,EAAE;AACVhB,QAAAA,SAAS,EAAE;AADD;AADkB,KAAhC;AAMAW,IAAAA,IAAI,CAACG,OAAL,CAAaD,MAAM,CAACK,OAApB,EAA6B;AAC3BF,MAAAA,UAAU,EAAE;AACVhB,QAAAA,SAAS,EAAE;AADD;AADe,KAA7B;AAMAW,IAAAA,IAAI,CAACG,OAAL,CAAaD,MAAM,CAACM,QAApB,EAA8B;AAC5BH,MAAAA,UAAU,EAAE;AACVhB,QAAAA,SAAS,EAAE;AADD;AADgB,KAA9B;AAKD,GAzBD;;AA2BAL,EAAAA,IAAI,CAACyB,SAAL,CAAeC,aAAf,GAA+B,UAAShB,QAAT,EAAmB;AAChD,QAAIA,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B,aAAO,IAAP;AACD;AAAC,GAHJ;;AAKA,SAAOV,IAAP;AACD,CAvEH","sourcesContent":["var moment = require('moment');\n\nmodule.exports = function(sequelize, DataTypes) {\n  \n    const User = sequelize.define(\"user\", {\n      // The email cannot be null, and must be a proper email before creation\n      firstName: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      lastName: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      //auth level will have a drop down with the options Employee, Manager, Admin\n      authLevel: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      //username and password are used for auth/login purposes\n      username: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      password: {\n        type: DataTypes.STRING,\n        allowNull: false\n      },\n      manager: {\n        type: DataTypes.STRING,\n        allowNull: true\n      },\n      employmentDate: {\n        type: DataTypes.DATEONLY,\n        allowNull: true,\n        defaultValue: moment().format('l')\n      }\n    }); \n\n    user.associate = function(models) {\n\n      user.hasMany(models.timeCard, {\n        foreignKey: {\n          allowNull: true\n        }\n      });\n\n      user.hasMany(models.ptoRequest, {\n        foreignKey: {\n          allowNull: true\n        }\n      });\n\n      user.hasMany(models.expense, {\n        foreignKey: {\n          allowNull: true\n        }\n      });\n\n      user.hasMany(models.citation, {\n        foreignKey: {\n          allowNull: true\n        }\n      });\n    };\n  \n    User.prototype.validPassword = function(password) {\n      if (password === this.password) {\n        return true;\n      }};\n  \n    return User;\n  };\n  "]},"metadata":{},"sourceType":"script"}